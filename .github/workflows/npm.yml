name: NodeJS CI Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Lambda Dependencies
        run: |
          cd lambda
          npm install
          cd ..
          npm install
          cd metrics
          npm install
          cd ..
          cd authentication
          npm install

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install awscli -y

      - name: Zip Lambda files
        run: |
          cd lambda
          tsc
          zip -r upload.zip upload_package.js node_modules 
          zip -r function.zip packagesubendpoints.js node_modules
          zip -r regex.zip byregex.js node_modules
          zip -r reset.zip reset.js node_modules
          zip -r cost.zip cost.js node_modules
          zip -r packages.zip packages.js node_modules
          cd ..
          cd metrics
          zip -r metrics.zip *.js node_modules
      - name: Run tests
        run: |
          node runtests.js
      - name: Update LambdaFunction_PackageUpload
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          retries=5
          delay=10
          for ((i=0; i<retries; i++)); do
            if aws lambda update-function-code --function-name LambdaFunction_PackageUpload --zip-file fileb://lambda/upload.zip; then
              echo "Update successful for LambdaFunction_PackageUpload"
              break
            else
              echo "Update failed, retrying in $delay seconds..."
              sleep $delay
            fi
          done

      - name: Update packagesid Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          retries=5
          delay=10
          for ((i=0; i<retries; i++)); do
            if aws lambda update-function-code --function-name packagesid --zip-file fileb://lambda/function.zip; then
              echo "Update successful for packagesid"
              break
            else
              echo "Update failed, retrying in $delay seconds..."
              sleep $delay
            fi
          done

      - name: Update metrics Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          retries=5
          delay=10
          for ((i=0; i<retries; i++)); do
            if aws lambda update-function-code --function-name metrics --zip-file fileb://metrics/metrics.zip; then
              echo "Update successful for metrics"
              break
            else
              echo "Update failed, retrying in $delay seconds..."
              sleep $delay
            fi
          done

      - name: Update regex Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          retries=5
          delay=10
          for ((i=0; i<retries; i++)); do
            if aws lambda update-function-code --function-name regex --zip-file fileb://lambda/regex.zip; then
              echo "Update successful for regex"
              break
            else
              echo "Update failed, retrying in $delay seconds..."
              sleep $delay
            fi
          done
      - name: Update reset Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          retries=5
          delay=10
          for ((i=0; i<retries; i++)); do
            if aws lambda update-function-code --function-name resetDatabase --zip-file fileb://lambda/reset.zip; then
              echo "Update successful for regex"
              break
            else
              echo "Update failed, retrying in $delay seconds..."
              sleep $delay
            fi
          done
      - name: Update cost Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          retries=5
          delay=10
          for ((i=0; i<retries; i++)); do
            if aws lambda update-function-code --function-name cost --zip-file fileb://lambda/cost.zip; then
              echo "Update successful for regex"
              break
            else
              echo "Update failed, retrying in $delay seconds..."
              sleep $delay
      - name: Update packages Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          retries=5
          delay=10
          for ((i=0; i<retries; i++)); do
            if aws lambda update-function-code --function-name packages --zip-file fileb://lambda/packages.zip; then
              echo "Update successful for regex"
              break
            else
              echo "Update failed, retrying in $delay seconds..."
              sleep $delay
            fi
          done
